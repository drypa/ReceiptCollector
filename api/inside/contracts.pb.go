// Code generated by protoc-gen-go. DO NOT EDIT.
// source: contracts.proto

package inside_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ErrorResponse struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorResponse) Reset()         { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string { return proto.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()    {}
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d125f880f9ca35, []int{0}
}

func (m *ErrorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorResponse.Unmarshal(m, b)
}
func (m *ErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorResponse.Marshal(b, m, deterministic)
}
func (m *ErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorResponse.Merge(m, src)
}
func (m *ErrorResponse) XXX_Size() int {
	return xxx_messageInfo_ErrorResponse.Size(m)
}
func (m *ErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorResponse proto.InternalMessageInfo

func (m *ErrorResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*ErrorResponse)(nil), "inside_api.ErrorResponse")
}

func init() { proto.RegisterFile("contracts.proto", fileDescriptor_b6d125f880f9ca35) }

var fileDescriptor_b6d125f880f9ca35 = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x9b, 0x8b, 0xf1, 0xe7, 0x34, 0x1d, 0xc8, 0xec, 0x62, 0x0b, 0x30, 0x50, 0xf8, 0x23,
	0xae, 0x2a, 0x54, 0x5e, 0x80, 0xc2, 0x58, 0x34, 0x54, 0xa6, 0x91, 0xae, 0xda, 0x05, 0x17, 0xc8,
	0x24, 0x47, 0xc3, 0x2a, 0xd8, 0xc1, 0x3e, 0x65, 0xda, 0x73, 0xf0, 0x8e, 0x3c, 0x05, 0x17, 0x28,
	0x71, 0xdc, 0xda, 0x51, 0x0b, 0xbd, 0x3c, 0xe7, 0xf7, 0xf9, 0xf3, 0xe7, 0xd3, 0xd3, 0xc0, 0x9d,
	0x42, 0x49, 0xd2, 0xbc, 0x20, 0x33, 0xac, 0xb4, 0x22, 0xc5, 0x40, 0x48, 0x23, 0x4a, 0xfc, 0xcc,
	0x2b, 0x91, 0xec, 0x6a, 0x2c, 0x50, 0x54, 0x8e, 0x25, 0xbb, 0xbc, 0x28, 0xd4, 0x42, 0xae, 0x6a,
	0x8d, 0x3f, 0x16, 0x68, 0x96, 0xf5, 0xa0, 0xc4, 0x9f, 0xa2, 0x40, 0x57, 0xc6, 0x1a, 0x2b, 0xa5,
	0xc9, 0x56, 0xe9, 0x33, 0x18, 0xbc, 0xd3, 0x5a, 0xe9, 0x1c, 0x4d, 0xa5, 0xa4, 0x41, 0xb6, 0x07,
	0x3b, 0x58, 0x37, 0xf6, 0xa3, 0xc7, 0xd1, 0x8b, 0xdb, 0xb9, 0x2d, 0x46, 0xbf, 0x23, 0x80, 0xb1,
	0xbd, 0x66, 0x5c, 0x09, 0x76, 0x06, 0x71, 0x86, 0x34, 0x51, 0x97, 0x42, 0x4e, 0x84, 0x9c, 0xb3,
	0x47, 0xc3, 0x55, 0xbe, 0xa1, 0x4f, 0x72, 0x1b, 0x25, 0x79, 0xe8, 0x0b, 0x3c, 0x6a, 0x2f, 0x4d,
	0x7b, 0xec, 0x35, 0xdc, 0xca, 0x90, 0x66, 0x06, 0xb5, 0x61, 0x7b, 0xbe, 0xf8, 0x54, 0x9d, 0x71,
	0xcd, 0xbf, 0x9b, 0xe4, 0x41, 0xe7, 0x8e, 0x46, 0xeb, 0x39, 0x1c, 0xc1, 0xcd, 0xb6, 0xcb, 0x92,
	0x35, 0x52, 0x97, 0xe4, 0xfe, 0x5a, 0xe6, 0x5c, 0x46, 0x7f, 0x22, 0x80, 0xdc, 0xce, 0xb7, 0x7e,
	0xe8, 0x07, 0x80, 0x71, 0x59, 0xb6, 0x0d, 0x16, 0xbc, 0x62, 0xd5, 0x77, 0xd6, 0x87, 0x9b, 0xf0,
	0x32, 0xe3, 0x31, 0xf4, 0x33, 0xa4, 0xb6, 0x6f, 0xd8, 0x61, 0x27, 0x8b, 0x03, 0xce, 0xf0, 0x9e,
	0xcf, 0x5b, 0x98, 0xf6, 0x5e, 0x46, 0xec, 0x02, 0x06, 0xb5, 0x9c, 0x5f, 0xb9, 0x64, 0xcf, 0xbb,
	0x4e, 0x4b, 0x94, 0x37, 0xbf, 0xb6, 0x73, 0x0c, 0x86, 0xd8, 0x15, 0xa5, 0xbd, 0xd1, 0xaf, 0x1d,
	0xe8, 0x9f, 0x48, 0x42, 0x2d, 0xf9, 0xb7, 0xfa, 0xfd, 0x9f, 0x20, 0xce, 0xf1, 0x52, 0x18, 0x42,
	0xdd, 0x4c, 0xf6, 0x89, 0x7f, 0xde, 0x8e, 0xae, 0xa6, 0x9a, 0x93, 0x50, 0xd2, 0x5d, 0xf2, 0xf4,
	0xdf, 0xa2, 0xe5, 0x34, 0x4e, 0x61, 0x3f, 0x43, 0x3a, 0x16, 0xda, 0xd0, 0x4c, 0x16, 0x73, 0x2c,
	0xe6, 0x58, 0xb6, 0x1e, 0x1b, 0x76, 0x20, 0x59, 0x33, 0x90, 0xf6, 0x44, 0xda, 0x63, 0xe7, 0x70,
	0x77, 0x8a, 0xae, 0x9e, 0x12, 0xa7, 0x85, 0x09, 0x03, 0x77, 0xa9, 0x0b, 0x7c, 0xe0, 0x8b, 0x82,
	0xbf, 0x43, 0xe3, 0x7a, 0xe0, 0x52, 0xb6, 0xfa, 0x0b, 0x41, 0x5f, 0x5b, 0xfb, 0xe0, 0xe4, 0xc7,
	0x05, 0xea, 0xeb, 0x37, 0xd7, 0x16, 0xfd, 0x27, 0xeb, 0x7b, 0xe8, 0x4f, 0x91, 0xce, 0x45, 0x31,
	0x47, 0x3a, 0x29, 0xc3, 0x4d, 0xf0, 0xc0, 0x56, 0x09, 0x27, 0x10, 0xd7, 0xdb, 0xc6, 0xaf, 0xec,
	0xa9, 0xf0, 0xdf, 0xe8, 0x93, 0xad, 0xdc, 0xde, 0x02, 0x64, 0x48, 0x47, 0xf6, 0x9b, 0x11, 0xae,
	0xfc, 0xaa, 0xef, 0x9c, 0x98, 0x8f, 0x2d, 0x6b, 0x16, 0x74, 0x02, 0xf1, 0xac, 0x2a, 0x39, 0xa1,
	0xed, 0x85, 0x91, 0x7c, 0xb2, 0x4d, 0xa4, 0x2f, 0x37, 0x9a, 0x6f, 0xd5, 0xab, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x5a, 0x9e, 0xe5, 0xa8, 0x17, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AccountApiClient is the client API for AccountApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountApiClient interface {
	GetLoginLink(ctx context.Context, in *GetLoginLinkRequest, opts ...grpc.CallOption) (*LoginLinkResponse, error)
	GetUsers(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type accountApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountApiClient(cc grpc.ClientConnInterface) AccountApiClient {
	return &accountApiClient{cc}
}

func (c *accountApiClient) GetLoginLink(ctx context.Context, in *GetLoginLinkRequest, opts ...grpc.CallOption) (*LoginLinkResponse, error) {
	out := new(LoginLinkResponse)
	err := c.cc.Invoke(ctx, "/inside_api.AccountApi/GetLoginLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) GetUsers(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/inside_api.AccountApi/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/inside_api.AccountApi/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountApiServer is the server API for AccountApi service.
type AccountApiServer interface {
	GetLoginLink(context.Context, *GetLoginLinkRequest) (*LoginLinkResponse, error)
	GetUsers(context.Context, *NoParams) (*GetUsersResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
}

// UnimplementedAccountApiServer can be embedded to have forward compatible implementations.
type UnimplementedAccountApiServer struct {
}

func (*UnimplementedAccountApiServer) GetLoginLink(ctx context.Context, req *GetLoginLinkRequest) (*LoginLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginLink not implemented")
}
func (*UnimplementedAccountApiServer) GetUsers(ctx context.Context, req *NoParams) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedAccountApiServer) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

func RegisterAccountApiServer(s *grpc.Server, srv AccountApiServer) {
	s.RegisterService(&_AccountApi_serviceDesc, srv)
}

func _AccountApi_GetLoginLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).GetLoginLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.AccountApi/GetLoginLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).GetLoginLink(ctx, req.(*GetLoginLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.AccountApi/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).GetUsers(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.AccountApi/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inside_api.AccountApi",
	HandlerType: (*AccountApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoginLink",
			Handler:    _AccountApi_GetLoginLink_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _AccountApi_GetUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AccountApi_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contracts.proto",
}

// ReceiptApiClient is the client API for ReceiptApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReceiptApiClient interface {
	AddReceipt(ctx context.Context, in *AddReceiptRequest, opts ...grpc.CallOption) (*AddReceiptResponse, error)
	GetReceipts(ctx context.Context, in *GetReceiptsRequest, opts ...grpc.CallOption) (ReceiptApi_GetReceiptsClient, error)
	GetRawReceipt(ctx context.Context, in *GetRawReceiptReportRequest, opts ...grpc.CallOption) (*RawReceiptReport, error)
}

type receiptApiClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiptApiClient(cc grpc.ClientConnInterface) ReceiptApiClient {
	return &receiptApiClient{cc}
}

func (c *receiptApiClient) AddReceipt(ctx context.Context, in *AddReceiptRequest, opts ...grpc.CallOption) (*AddReceiptResponse, error) {
	out := new(AddReceiptResponse)
	err := c.cc.Invoke(ctx, "/inside_api.ReceiptApi/AddReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptApiClient) GetReceipts(ctx context.Context, in *GetReceiptsRequest, opts ...grpc.CallOption) (ReceiptApi_GetReceiptsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReceiptApi_serviceDesc.Streams[0], "/inside_api.ReceiptApi/GetReceipts", opts...)
	if err != nil {
		return nil, err
	}
	x := &receiptApiGetReceiptsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReceiptApi_GetReceiptsClient interface {
	Recv() (*Receipt, error)
	grpc.ClientStream
}

type receiptApiGetReceiptsClient struct {
	grpc.ClientStream
}

func (x *receiptApiGetReceiptsClient) Recv() (*Receipt, error) {
	m := new(Receipt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *receiptApiClient) GetRawReceipt(ctx context.Context, in *GetRawReceiptReportRequest, opts ...grpc.CallOption) (*RawReceiptReport, error) {
	out := new(RawReceiptReport)
	err := c.cc.Invoke(ctx, "/inside_api.ReceiptApi/GetRawReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiptApiServer is the server API for ReceiptApi service.
type ReceiptApiServer interface {
	AddReceipt(context.Context, *AddReceiptRequest) (*AddReceiptResponse, error)
	GetReceipts(*GetReceiptsRequest, ReceiptApi_GetReceiptsServer) error
	GetRawReceipt(context.Context, *GetRawReceiptReportRequest) (*RawReceiptReport, error)
}

// UnimplementedReceiptApiServer can be embedded to have forward compatible implementations.
type UnimplementedReceiptApiServer struct {
}

func (*UnimplementedReceiptApiServer) AddReceipt(ctx context.Context, req *AddReceiptRequest) (*AddReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReceipt not implemented")
}
func (*UnimplementedReceiptApiServer) GetReceipts(req *GetReceiptsRequest, srv ReceiptApi_GetReceiptsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReceipts not implemented")
}
func (*UnimplementedReceiptApiServer) GetRawReceipt(ctx context.Context, req *GetRawReceiptReportRequest) (*RawReceiptReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawReceipt not implemented")
}

func RegisterReceiptApiServer(s *grpc.Server, srv ReceiptApiServer) {
	s.RegisterService(&_ReceiptApi_serviceDesc, srv)
}

func _ReceiptApi_AddReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptApiServer).AddReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.ReceiptApi/AddReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptApiServer).AddReceipt(ctx, req.(*AddReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptApi_GetReceipts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetReceiptsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReceiptApiServer).GetReceipts(m, &receiptApiGetReceiptsServer{stream})
}

type ReceiptApi_GetReceiptsServer interface {
	Send(*Receipt) error
	grpc.ServerStream
}

type receiptApiGetReceiptsServer struct {
	grpc.ServerStream
}

func (x *receiptApiGetReceiptsServer) Send(m *Receipt) error {
	return x.ServerStream.SendMsg(m)
}

func _ReceiptApi_GetRawReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawReceiptReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptApiServer).GetRawReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.ReceiptApi/GetRawReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptApiServer).GetRawReceipt(ctx, req.(*GetRawReceiptReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReceiptApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inside_api.ReceiptApi",
	HandlerType: (*ReceiptApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReceipt",
			Handler:    _ReceiptApi_AddReceipt_Handler,
		},
		{
			MethodName: "GetRawReceipt",
			Handler:    _ReceiptApi_GetRawReceipt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetReceipts",
			Handler:       _ReceiptApi_GetReceipts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contracts.proto",
}

// InternalApiClient is the client API for InternalApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InternalApiClient interface {
	RegisterUser(ctx context.Context, in *UserRegistrationRequest, opts ...grpc.CallOption) (*UserRegistrationResponse, error)
	GetFirstUnckeckedRequest(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*ReceiptRequest, error)
	SetRequestStatus(ctx context.Context, in *SetRequestStatusRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	GetFirstRequestWithStatus(ctx context.Context, in *QueryByStatus, opts ...grpc.CallOption) (*ReceiptRequest, error)
	SetTicketId(ctx context.Context, in *SetTicketIdRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	AddRawTicket(ctx context.Context, in *AddRawTicketRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (InternalApi_GetDevicesClient, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
}

type internalApiClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalApiClient(cc grpc.ClientConnInterface) InternalApiClient {
	return &internalApiClient{cc}
}

func (c *internalApiClient) RegisterUser(ctx context.Context, in *UserRegistrationRequest, opts ...grpc.CallOption) (*UserRegistrationResponse, error) {
	out := new(UserRegistrationResponse)
	err := c.cc.Invoke(ctx, "/inside_api.InternalApi/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) GetFirstUnckeckedRequest(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*ReceiptRequest, error) {
	out := new(ReceiptRequest)
	err := c.cc.Invoke(ctx, "/inside_api.InternalApi/GetFirstUnckeckedRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) SetRequestStatus(ctx context.Context, in *SetRequestStatusRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/inside_api.InternalApi/SetRequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) GetFirstRequestWithStatus(ctx context.Context, in *QueryByStatus, opts ...grpc.CallOption) (*ReceiptRequest, error) {
	out := new(ReceiptRequest)
	err := c.cc.Invoke(ctx, "/inside_api.InternalApi/GetFirstRequestWithStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) SetTicketId(ctx context.Context, in *SetTicketIdRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/inside_api.InternalApi/SetTicketId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) AddRawTicket(ctx context.Context, in *AddRawTicketRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/inside_api.InternalApi/AddRawTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalApiClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (InternalApi_GetDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InternalApi_serviceDesc.Streams[0], "/inside_api.InternalApi/GetDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalApiGetDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InternalApi_GetDevicesClient interface {
	Recv() (*Device, error)
	grpc.ClientStream
}

type internalApiGetDevicesClient struct {
	grpc.ClientStream
}

func (x *internalApiGetDevicesClient) Recv() (*Device, error) {
	m := new(Device)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *internalApiClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/inside_api.InternalApi/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalApiServer is the server API for InternalApi service.
type InternalApiServer interface {
	RegisterUser(context.Context, *UserRegistrationRequest) (*UserRegistrationResponse, error)
	GetFirstUnckeckedRequest(context.Context, *NoParams) (*ReceiptRequest, error)
	SetRequestStatus(context.Context, *SetRequestStatusRequest) (*ErrorResponse, error)
	GetFirstRequestWithStatus(context.Context, *QueryByStatus) (*ReceiptRequest, error)
	SetTicketId(context.Context, *SetTicketIdRequest) (*ErrorResponse, error)
	AddRawTicket(context.Context, *AddRawTicketRequest) (*ErrorResponse, error)
	GetDevices(*GetDevicesRequest, InternalApi_GetDevicesServer) error
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*ErrorResponse, error)
}

// UnimplementedInternalApiServer can be embedded to have forward compatible implementations.
type UnimplementedInternalApiServer struct {
}

func (*UnimplementedInternalApiServer) RegisterUser(ctx context.Context, req *UserRegistrationRequest) (*UserRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedInternalApiServer) GetFirstUnckeckedRequest(ctx context.Context, req *NoParams) (*ReceiptRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirstUnckeckedRequest not implemented")
}
func (*UnimplementedInternalApiServer) SetRequestStatus(ctx context.Context, req *SetRequestStatusRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRequestStatus not implemented")
}
func (*UnimplementedInternalApiServer) GetFirstRequestWithStatus(ctx context.Context, req *QueryByStatus) (*ReceiptRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirstRequestWithStatus not implemented")
}
func (*UnimplementedInternalApiServer) SetTicketId(ctx context.Context, req *SetTicketIdRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTicketId not implemented")
}
func (*UnimplementedInternalApiServer) AddRawTicket(ctx context.Context, req *AddRawTicketRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRawTicket not implemented")
}
func (*UnimplementedInternalApiServer) GetDevices(req *GetDevicesRequest, srv InternalApi_GetDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (*UnimplementedInternalApiServer) UpdateDevice(ctx context.Context, req *UpdateDeviceRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}

func RegisterInternalApiServer(s *grpc.Server, srv InternalApiServer) {
	s.RegisterService(&_InternalApi_serviceDesc, srv)
}

func _InternalApi_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalApiServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.InternalApi/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalApiServer).RegisterUser(ctx, req.(*UserRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalApi_GetFirstUnckeckedRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalApiServer).GetFirstUnckeckedRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.InternalApi/GetFirstUnckeckedRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalApiServer).GetFirstUnckeckedRequest(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalApi_SetRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalApiServer).SetRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.InternalApi/SetRequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalApiServer).SetRequestStatus(ctx, req.(*SetRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalApi_GetFirstRequestWithStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryByStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalApiServer).GetFirstRequestWithStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.InternalApi/GetFirstRequestWithStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalApiServer).GetFirstRequestWithStatus(ctx, req.(*QueryByStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalApi_SetTicketId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTicketIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalApiServer).SetTicketId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.InternalApi/SetTicketId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalApiServer).SetTicketId(ctx, req.(*SetTicketIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalApi_AddRawTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRawTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalApiServer).AddRawTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.InternalApi/AddRawTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalApiServer).AddRawTicket(ctx, req.(*AddRawTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalApi_GetDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalApiServer).GetDevices(m, &internalApiGetDevicesServer{stream})
}

type InternalApi_GetDevicesServer interface {
	Send(*Device) error
	grpc.ServerStream
}

type internalApiGetDevicesServer struct {
	grpc.ServerStream
}

func (x *internalApiGetDevicesServer) Send(m *Device) error {
	return x.ServerStream.SendMsg(m)
}

func _InternalApi_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalApiServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inside_api.InternalApi/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalApiServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inside_api.InternalApi",
	HandlerType: (*InternalApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _InternalApi_RegisterUser_Handler,
		},
		{
			MethodName: "GetFirstUnckeckedRequest",
			Handler:    _InternalApi_GetFirstUnckeckedRequest_Handler,
		},
		{
			MethodName: "SetRequestStatus",
			Handler:    _InternalApi_SetRequestStatus_Handler,
		},
		{
			MethodName: "GetFirstRequestWithStatus",
			Handler:    _InternalApi_GetFirstRequestWithStatus_Handler,
		},
		{
			MethodName: "SetTicketId",
			Handler:    _InternalApi_SetTicketId_Handler,
		},
		{
			MethodName: "AddRawTicket",
			Handler:    _InternalApi_AddRawTicket_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _InternalApi_UpdateDevice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDevices",
			Handler:       _InternalApi_GetDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contracts.proto",
}
